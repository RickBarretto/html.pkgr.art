import {unitt}!
import {src/elements/_generator}!

test "generic elements follows the standard for :string" [
    result: element "el" "Hello, World!"
    assert -> "<el>Hello, World!</el>" = result
]


test "generic elements follows the standard for nested :block s" [
    ;; This test tests multiple things:
    ;; * Opening and closing tags:
    ;;      Each element should be opened and closed
    ;; * Indentation
    ;;      Two spaces must be added per element nesting
    ;; * Evaluation
    ;;      the user shouldn't use '@ to evaluate, the element must do it

    breakLine: "<br>"
    bold: $[x][element "b" x]
    paragraph: $[x][element "p" x]

    expect: {!html
        <p>
          Hello,
          <br>
          <b>World</b>
          !
        </p>
    }

    result: paragraph [
        "Hello,"
        breakLine
        bold "World" "!"
    ]

    assert -> expect = result
]

test "indentation follows the nesting of elements" [
    ;; Also verifies the nesting for strings
    ;;
    ;; How the formatation must work:
    ;;
    ;; tag "Content" 
    ;; ; <tag>Content</tag>
    ;;
    ;; tag ["Content"] 
    ;; ; <tag>
    ;; ;   Content
    ;; ; </tag>

    divisory: $[x][element "div" x]

    expect: {!html
        <div>
          Level 01
          <div>
            Level 02
            <div>Level 03</div>
            Level 02
          </div>
          Level 01
        </div>
    }

    result: divisory [
        "Level 01"
        divisory [
            "Level 02"
            divisory "Level 03"
            "Level 02"
        ]
        "Level 01"
    ]

    assert -> expect = result
]

test "dynamic attributes follows standard" [
    ;; We can dynamically add Elements's attributes by using Arturo's attributes
    ;;
    ;; How this must work:
    ;;
    ;; tag.class: "content" "Content" 
    ;; ; <tag class="content">Content</tag>
    ;;
    ;; tag.author: "RickB" ["Content"] 
    ;; ; <tag author="RickB">
    ;; ;   Content
    ;; ; </tag>

    divisory: $[x][element "div" x]
    entry: $[x][element .name: x "input" ""]
    button: $[x][element "button" x]

    expect: {!html
        <div class="login-box">
          <input type="email" name="user"></input>
          <input type="password" name="pwd"></input>
          <button class="enter">Log In</button>
          <button class="recover">Forgot my password</button>
        </div>
    }

    result: divisory.class: "login-box" [
        entry.type: 'email "user" 
        entry.type: 'password "pwd"
        button.class: 'enter "Log In"
        button.class: 'recover "Forgot my password"
    ]

    assert -> expect = result
]