import {unitt}!
import {src/elements/_generator}!


test.skip "new element of kind :group/:section only accepts :blocks" [
    loop [:group :section] 'kind [
        head: newElement 'head kind

        assert -> not? throws? [head ["Hello"]]
        assert -> throws? [head "Hello"]
        assert -> throws? [head 'hello]
        assert -> throws? [head to :word "Hello"]
        assert -> throws? [head #[hello: "World"]]
    ]
]

test.skip "new element of kind :text/:inline only accepts :string-based types" [
    loop [:text :inline] 'kind [
        bold: newElement 'b kind

        assert -> not? throws? [head "Hello"]
        assert -> not? throws? [head 'hello]
        assert -> not? throws? [head to :word "Hello"]
        assert -> throws? [head ["Hello"]]
        assert -> throws? [head #[hello: "World"]]
    ]
]

test.skip "new element of kind :any accepts :any" [
    entry: newElement 'input :any

    assert -> not? throws? [head 'hello]
    assert -> not? throws? [head "Hello"]
    assert -> not? throws? [head to :word "Hello"]
    assert -> not? throws? [head ["Hello"]]
    assert -> not? throws? [head #[hello: "World"]]
]

test.skip "new element of kind :void accepts :dictionary" [
    entry: newElement 'input :void

    assert -> not? throws? [head #[hello: "World"]]
    assert -> throws? [head 'hello]
    assert -> throws? [head "Hello"]
    assert -> throws? [head to :word "Hello"]
    assert -> throws? [head ["Hello"]]
]
