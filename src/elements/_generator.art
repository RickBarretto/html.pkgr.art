
_kebab: $[content :string][
    replace content "_" "-"
]

voidElement: $[tag :string :literal htmlAttributes :dictionary][
    ;; Void elements are elements without closing-tags.
    ;;
    ;; Format
    ;; ------
    ;; They follows the pattern: ``<tag key="value" .../>``
    ;; 
    ;; Features
    ;; --------
    ;; Use Arturo's attributes to dynamically add html's attributes to it.
    ;;
    ;; Extra
    ;; -----
    ;; Read more about void elements here: 
    ;; <https://html.spec.whatwg.org/multipage/syntax.html#void-elements/>
    
    attributes: (
        map htmlAttributes [key value] -> render {|_kebab key|="|value|"} 
            | append (map attrs [key value] -> render {|_kebab key|="|value|"})
            | join.with: " " 
    )

    if attributes <> "" -> prepend 'attributes " "
    ~"<|tag||attributes|/>" 
]

element: $[tag :string :literal content :block :string :dictionary][
    ;; Elements refers to the normal elements defined by the HTML5 standard.
    ;;
    ;; Format
    ;; ------
    ;; * They follows the pattern: ``<tag key="value" .../>content<tag />``.
    ;; * When ``content`` is a :block, the content will be intended by 2 spaces.
    ;; 
    ;; Features
    ;; --------
    ;; Use Arturo's attributes to dynamically add html's attributes to it.
    ;;
    ;; Extra
    ;; -----
    ;; Read more about elements here: 
    ;; <https://html.spec.whatwg.org/multipage/syntax.html#elements-2/>

    if dictionary? content ->
        return voidElement tag content

    attributes: (join.with: " " map attrs [key value] -> render {|_kebab key|="|value|"})
    if attributes <> "" -> prepend 'attributes " "

    if block? content ->
        join.with: "\n" @[
            ~"<|tag||attributes|>" 
            indent.n: 2 join.with: "\n" @content
            ~"</|tag|>"
        ] 

    if string? content ->
        ~"<|tag||attributes|>|content|</|tag|>"
]

newElement: $[tag :string :literal][
    head: [content :string :block :dictionary]
    body: [element] ++ (@[tag]) ++ [content]

    function head body
]
