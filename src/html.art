

define :htmlModule [

    init: method [][
        elements: #./"elements.art"
        loop elements ['el 'action] -> this\[el]: var get info.get 'action 'name
    ]

    newElement: method [tag :string :literal kind :type][

        head: [content]
        body: [this\element] ++ (@[tag]) ++ [content]

        if in? kind [:group :section] -> 
            append 'head :block

        if in? kind [:text :inline] -> 
            append 'head :string
        
        if in? kind [:any] -> 
            append 'head [:block :string]

        if in? kind [:void] [
            append 'head :dictionary
            drop 'body
            prepend 'body [this\voidElement]
        ]

        method head body
        
    ]

    element: method [tag :string :literal content :block :string][
        ;; Elements refers to the normal elements defined by the HTML5 standard.
        ;;
        ;; Format
        ;; ------
        ;; * They follows the pattern: ``<tag key="value" .../>content<tag />``.
        ;; * When ``content`` is a :block, the content will be intended by 2 spaces.
        ;; 
        ;; Features
        ;; --------
        ;; Use Arturo's attributes to dynamically add html's attributes to it.
        ;;
        ;; Extra
        ;; -----
        ;; Read more about elements here: 
        ;; <https://html.spec.whatwg.org/multipage/syntax.html#elements-2/>

        attributes: (join.with: " " map attrs [key value] -> render {|key|="|value|"})
        if attributes <> "" -> prepend 'attributes " "

        if block? content ->
            join.with: "\n" @[
                ~"<|tag||attributes|>" 
                indent.n: 2 join.with: "\n" @content
                ~"</|tag|>"
            ] 

        if string? content ->
            ~"<|tag||attributes|>|content|</|tag|>"
    ]
    
    voidElement: method [tag :string :literal htmlAttributes :dictionary][
        ;; Void elements are elements without closing-tags.
        ;;
        ;; Format
        ;; ------
        ;; They follows the pattern: ``<tag key="value" .../>``
        ;; 
        ;; Features
        ;; --------
        ;; Use Arturo's attributes to dynamically add html's attributes to it.
        ;;
        ;; Extra
        ;; -----
        ;; Read more about void elements here: 
        ;; <https://html.spec.whatwg.org/multipage/syntax.html#void-elements/>
        
        attributes: (
            map htmlAttributes [key value] -> render {|key|="|value|"} 
                | append (map attrs [key value] -> render {|key|="|value|"})
                | join.with: " " 
        )

        if attributes <> "" -> prepend 'attributes " "
        ~"<|tag||attributes|/>" 
    ]

]


artml: to :htmlModule []